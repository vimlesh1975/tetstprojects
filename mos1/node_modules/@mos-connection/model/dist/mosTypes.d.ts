import * as MosString128 from './mosTypes/mosString128';
import * as MosDuration from './mosTypes/mosDuration';
import * as MosTime from './mosTypes/mosTime';
export { IMOSString128 } from './mosTypes/mosString128';
export { IMOSDuration } from './mosTypes/mosDuration';
export { IMOSTime } from './mosTypes/mosTime';
/**
 * Returns utility-functions for handling of MosTypes.
 * @example
 * const mosTypes = getMosTypes(true)
 * const myString128 = mosTypes.mosString128.create('Hello world')
 * const myString = mosTypes.mosString128.stringify(myString128)
 * @param strict If true, creating out-of-spec values will throw an error (Example: Creating longer-than-128-characters long MosString128).
 */
export declare function getMosTypes(strict: boolean): MosTypes;
export interface MosTypes {
    strict: boolean;
    mosString128: MosType<MosString128.IMOSString128, string, MosString128.AnyValue>;
    mosDuration: MosType<MosDuration.IMOSDuration, number, MosDuration.AnyValue>;
    mosTime: MosType<MosTime.IMOSTime, number, MosTime.AnyValue>;
}
/**
 * If value is a MosType, stringify it.
 * Throw error otherwise
 */
export declare function stringifyMosType(value: MosString128.IMOSString128 | MosDuration.IMOSDuration | MosTime.IMOSTime | any, mosTypes: MosTypes): {
    isMosType: true;
    stringValue: string;
} | {
    isMosType: false;
};
interface MosType<Serialized, Value, CreateValue> {
    /** Creates a MosType using provided data. The MosType is then used in data sent into MOS-connection  */
    create: (anyValue: CreateValue) => Serialized;
    /** (internal function) Validate the data. Throws if something is wrong with the data */
    validate: (value: Serialized) => void;
    /** Returns the value of the MosType */
    valueOf(value: Serialized): Value;
    /** Returns a stringified representation of the MosType */
    stringify(value: Serialized): string;
    /** Returns true if the provided data is of this MosType */
    is(value: Serialized | any): value is Serialized;
}
export interface IMOSExternalMetaData {
    MosScope?: IMOSScope;
    MosSchema: string;
    MosPayload: any;
}
export declare enum IMOSScope {
    OBJECT = "OBJECT",
    STORY = "STORY",
    PLAYLIST = "PLAYLIST"
}
//# sourceMappingURL=mosTypes.d.ts.map