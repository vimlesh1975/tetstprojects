import * as XMLBuilder from 'xmlbuilder';
import { IMOSROStory, IMOSExternalMetaData, IMOSObjectPath, IMOSItem, IMOSROFullStory, IMOSRunningOrderBase, IMOSRunningOrder } from '@mos-connection/model';
import { AnyXML } from '../lib';
import { ROAck } from './ROAck';
export declare namespace XMLMosROAck {
    function fromXML(xml: AnyXML, strict: boolean): ROAck;
}
export declare namespace XMLRunningOrderBase {
    function fromXML(xml: AnyXML, strict: boolean): IMOSRunningOrderBase;
    function toXML(xmlRo: XMLBuilder.XMLElement, ro: IMOSRunningOrderBase, strict: boolean): void;
}
export declare namespace XMLRunningOrder {
    function fromXML(xml: AnyXML, strict: boolean): IMOSRunningOrder;
}
export declare namespace XMLROStories {
    function fromXML(xml: Array<any>, strict: boolean): IMOSROStory[];
}
export declare namespace XMLROStoryBase {
    function toXML(xmlStory: XMLBuilder.XMLElement, story: IMOSROStory | IMOSROFullStory, strict: boolean): void;
}
export declare namespace XMLROStory {
    function fromXML(xml: AnyXML, strict: boolean): IMOSROStory;
    function toXML(xmlRoot: XMLBuilder.XMLElement, story: IMOSROStory, strict: boolean): void;
}
export declare namespace XMLMosItems {
    function fromXML(xml: Array<any>, strict: boolean): Array<IMOSItem>;
}
export declare namespace XMLMosItem {
    function fromXML(xml: AnyXML, strict: boolean): IMOSItem;
    function toXML(root: XMLBuilder.XMLElement, item: IMOSItem, strict: boolean): void;
}
export declare namespace XMLMosExternalMetaData {
    function fromXML(xml: AnyXML): IMOSExternalMetaData[];
    function toXML(xml: XMLBuilder.XMLElement, metadatas?: IMOSExternalMetaData[]): void;
}
export declare namespace XMLObjectPaths {
    function fromXML(xml: AnyXML): IMOSObjectPath[];
    function toXML(xmlItem: XMLBuilder.XMLElement, paths: IMOSObjectPath[] | undefined, strict: boolean): void;
}
//# sourceMappingURL=xmlConversion.d.ts.map