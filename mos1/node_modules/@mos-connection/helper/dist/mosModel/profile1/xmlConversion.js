"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XMLMosRequestObjectList = exports.XMLMosObject = exports.XMLMosObjects = exports.XMLMosAck = void 0;
const XMLBuilder = require("xmlbuilder");
const model_1 = require("@mos-connection/model");
const xmlConversion_1 = require("../profile2/xmlConversion");
const lib_1 = require("../lib");
const Utils_1 = require("../../utils/Utils");
/* eslint-disable @typescript-eslint/no-namespace */
var XMLMosAck;
(function (XMLMosAck) {
    function fromXML(xml, strict) {
        const mosTypes = (0, model_1.getMosTypes)(strict);
        const ack = {
            ID: mosTypes.mosString128.create(xml.objID),
            Revision: typeof xml.objRev === 'number' ? xml.objRev : 0,
            Status: typeof xml.status === 'string' ? xml.status : model_1.IMOSAckStatus.ACK,
            Description: mosTypes.mosString128.create(typeof xml.statusDescription === 'string' ? xml.statusDescription : ''),
        };
        return ack;
    }
    XMLMosAck.fromXML = fromXML;
})(XMLMosAck = exports.XMLMosAck || (exports.XMLMosAck = {}));
var XMLMosObjects;
(function (XMLMosObjects) {
    function fromXML(xml, strict) {
        if (!xml)
            return [];
        let xmlObjs = xml;
        if (!Array.isArray(xmlObjs))
            xmlObjs = [xmlObjs];
        return xmlObjs.map((xmlObj) => {
            return XMLMosObject.fromXML(xmlObj, strict);
        });
    }
    XMLMosObjects.fromXML = fromXML;
    function toXML(xml, objs, strict) {
        if (objs) {
            objs.forEach((MosObject) => {
                const xmlMosObj = XMLBuilder.create('mosObj');
                XMLMosObject.toXML(xmlMosObj, MosObject, strict);
                xml.importDocument(xmlMosObj);
            });
        }
    }
    XMLMosObjects.toXML = toXML;
})(XMLMosObjects = exports.XMLMosObjects || (exports.XMLMosObjects = {}));
var XMLMosObject;
(function (XMLMosObject) {
    function fromXML(xml, strict) {
        const mosTypes = (0, model_1.getMosTypes)(strict);
        const mosObj = {
            ID: mosTypes.mosString128.create(xml.objID),
            Slug: mosTypes.mosString128.create(xml.objSlug),
            MosAbstract: xml.mosAbstract,
            Group: xml.objGroup,
            Type: xml.objType,
            TimeBase: xml.objTB,
            Revision: xml.objRev,
            Duration: xml.objDur,
            Status: xml.status,
            AirStatus: xml.objAir,
            Paths: xmlConversion_1.XMLObjectPaths.fromXML(xml.objPaths),
            CreatedBy: mosTypes.mosString128.create(xml.createdBy),
            Created: mosTypes.mosTime.create(xml.created),
            ChangedBy: mosTypes.mosString128.create(xml.changedBy),
            Changed: mosTypes.mosTime.create(xml.changed),
            Description: xml.description,
        };
        if ((0, lib_1.has)(xml, 'mosExternalMetadata'))
            mosObj.MosExternalMetaData = xmlConversion_1.XMLMosExternalMetaData.fromXML(xml.mosExternalMetadata);
        if ((0, lib_1.has)(xml, 'mosItemEditorProgID'))
            mosObj.MosItemEditorProgID = mosTypes.mosString128.create(xml.mosItemEditorProgID);
        return mosObj;
    }
    XMLMosObject.fromXML = fromXML;
    function toXML(xml, obj, strict) {
        if (obj.ID)
            (0, Utils_1.addTextElementInternal)(xml, 'objID', obj.ID, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objSlug', obj.Slug, undefined, strict);
        if (obj.MosAbstract)
            (0, Utils_1.addTextElementInternal)(xml, 'mosAbstract', obj.MosAbstract, undefined, strict);
        if (obj.Group)
            (0, Utils_1.addTextElementInternal)(xml, 'objGroup', obj.Group, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objType', obj.Type, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objTB', obj.TimeBase, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objRev', obj.Revision, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objDur', obj.Duration, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'status', obj.Status, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'objAir', obj.AirStatus, undefined, strict);
        if (obj.Paths) {
            xmlConversion_1.XMLObjectPaths.toXML(xml, obj.Paths, strict);
        }
        (0, Utils_1.addTextElementInternal)(xml, 'createdBy', obj.CreatedBy, undefined, strict);
        (0, Utils_1.addTextElementInternal)(xml, 'created', obj.Created, undefined, strict);
        if (obj.ChangedBy)
            (0, Utils_1.addTextElementInternal)(xml, 'changedBy', obj.ChangedBy, undefined, strict);
        if (obj.Changed)
            (0, Utils_1.addTextElementInternal)(xml, 'changed', obj.Changed, undefined, strict);
        if (obj.Description)
            (0, Utils_1.addTextElementInternal)(xml, 'description', obj.Description, undefined, strict);
        xmlConversion_1.XMLMosExternalMetaData.toXML(xml, obj.MosExternalMetaData);
    }
    XMLMosObject.toXML = toXML;
})(XMLMosObject = exports.XMLMosObject || (exports.XMLMosObject = {}));
var XMLMosRequestObjectList;
(function (XMLMosRequestObjectList) {
    function fromXML(xml) {
        const list = {
            username: xml.username,
            queryID: xml.queryID,
            listReturnStart: xml.listReturnStart,
            listReturnEnd: xml.listReturnEnd,
            generalSearch: xml.generalSearch,
            mosSchema: xml.mosSchema,
            searchGroups: [],
        };
        if (typeof list.listReturnStart === 'object')
            list.listReturnStart = null;
        if (typeof list.listReturnEnd === 'object')
            list.listReturnEnd = null;
        for (const searchGroup of xml.searchGroup) {
            const i = list.searchGroups.push({ searchFields: searchGroup.searchField });
            for (const searchField of list.searchGroups[i - 1].searchFields) {
                if (searchField.sortByOrder)
                    searchField.sortByOrder = parseInt(searchField.sortByOrder + '', 10);
            }
        }
        return list;
    }
    XMLMosRequestObjectList.fromXML = fromXML;
})(XMLMosRequestObjectList = exports.XMLMosRequestObjectList || (exports.XMLMosRequestObjectList = {}));
//# sourceMappingURL=xmlConversion.js.map