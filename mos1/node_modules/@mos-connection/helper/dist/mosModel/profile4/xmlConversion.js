"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XMLROFullStory = void 0;
const model_1 = require("@mos-connection/model");
const xmlConversion_1 = require("../profile2/xmlConversion");
/* eslint-disable @typescript-eslint/no-namespace */
var XMLROFullStory;
(function (XMLROFullStory) {
    function fromXML(xml, strict) {
        if (typeof xml !== 'object')
            throw new Error('XML is not an object');
        const mosTypes = (0, model_1.getMosTypes)(strict);
        const story0 = xmlConversion_1.XMLROStory.fromXML(xml, strict);
        const story = {
            ID: story0.ID,
            Slug: story0.Slug,
            Number: story0.Number,
            MosExternalMetaData: story0.MosExternalMetaData,
            RunningOrderId: mosTypes.mosString128.create(xml.roID),
            Body: fromXMLStoryBody(xml.storyBody, strict),
        };
        return story;
    }
    XMLROFullStory.fromXML = fromXML;
})(XMLROFullStory = exports.XMLROFullStory || (exports.XMLROFullStory = {}));
function fromXMLStoryBody(xml, strict) {
    const body = [];
    /*
    // Not able to implement this currently, need to change {arrayNotation: true} in xml2json option
    let elementKeys = Object.keys(xml)
    elementKeys.forEach((key: string) => {
        // let elements
        let d = xml[key]

        if (!Array.isArray(d)) d = [d]

        d.forEach((el: any) => {
            let bodyItem: IMOSROFullStoryBodyItem = {
                Type: key,
                Content: el
            }
            body.push(bodyItem)
        })
    })
    */
    if (xml.elements && Array.isArray(xml.elements)) {
        for (const item of xml.elements) {
            const bodyItem = {
                Type: item.$name || item.$type,
                Content: item,
            };
            if (item.$name === 'storyItem') {
                bodyItem.Content = xmlConversion_1.XMLMosItem.fromXML(item, strict);
            }
            body.push(bodyItem);
        }
    }
    // Temporary implementation:
    if (xml.storyItem) {
        let items = xml.storyItem;
        if (!Array.isArray(items))
            items = [items];
        items.forEach((item) => {
            const bodyItem = {
                Type: 'storyItem',
                Content: item,
            };
            body.push(bodyItem);
        });
    }
    return body;
}
//# sourceMappingURL=xmlConversion.js.map