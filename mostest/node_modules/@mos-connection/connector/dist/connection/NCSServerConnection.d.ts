/// <reference types="node" />
import { ConnectionType } from './socketConnection';
import { MosSocketClient, CallBackFunction, QueueMessage } from '../connection/mosSocketClient';
import { MosModel } from '@mos-connection/helper';
import { EventEmitter } from 'events';
export declare const DEFAULT_COMMAND_TIMEOUT = 5000;
export interface ClientDescription {
    useHeartbeats: boolean;
    heartbeatConnected: boolean;
    client: MosSocketClient;
    clientDescription: MosModel.PortType;
}
export interface INCSServerConnection {
    on(event: 'rawMessage', listener: (type: string, message: string) => void): this;
}
export interface HandedOverQueue {
    messages: QueueMessage[];
    callbacks: {
        [messageId: string]: CallBackFunction;
    };
}
/** Handles connections to a NCS (server) */
export declare class NCSServerConnection extends EventEmitter implements INCSServerConnection {
    private _connected;
    private _id;
    private _host;
    private _timeout;
    private _mosID;
    private _debug;
    private _disposed;
    private _clients;
    private _emittedConnected;
    private _heartBeatsTimer?;
    private _heartBeatsInterval;
    constructor(id: string, host: string, mosID: string, timeout: number | undefined, heartbeatsInterval: number | undefined, debug: boolean);
    /** Create a MOS client, which talks to  */
    createClient(clientID: string, port: number, clientDescription: ConnectionType, useHeartbeats: boolean): void;
    /** */
    removeClient(clientID: string): void;
    connect(): void;
    executeCommand(message: MosModel.MosMessage): Promise<any>;
    setDebug(debug: boolean): void;
    get connected(): boolean;
    private _getClients;
    /** */
    get lowerPortClients(): MosSocketClient[];
    /** */
    get upperPortClients(): MosSocketClient[];
    /** */
    get queryPortClients(): MosSocketClient[];
    get host(): string;
    get id(): string;
    handOverQueue(otherConnection: NCSServerConnection): void;
    receiveQueue(queue: {
        [clientId: string]: HandedOverQueue;
    }): void;
    dispose(): Promise<void>;
    private _sendHeartBeats;
    private debugTrace;
}
//# sourceMappingURL=NCSServerConnection.d.ts.map